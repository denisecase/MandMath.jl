        - """
        - functions.jl is a Julia file for defining functions for MandMath.jl.
        - 
        - """
        - 
        - import CSV
        - import Glob
        - import HTTP
        - import JSON
        - import Logging
        - import LoggingExtras
        - import Printf
        - import Tables
        - 
        - # export public facing functions so they can be tested and used
        - export arrays_equal
        - export greet
        - export main
        - export process_file_or_url
        - export write_grid_to_csv
        - 
        4 function arrays_equal(array1::Array{Float64,2}, array2::Array{Float64,2})
        5     size(array1) == size(array2) || return false
        5     for i in eachindex(array1)
        8         if array1[i] != array2[i]
        1             return false
        -         end
       13     end
        2     return true
        - end
        - 
        5 function greet()
        4     return "Welcome to MandMath!"
        - end
        - 
        2 function is_url(input)
        2     return occursin("http://", input) || occursin("https://", input) ? true : false
        - end
        - 
        1 function process_file_or_url(input)
        1     @info "functions.process_file_or_url() called with $input."
        2     if is_url(input)
        1         @info "Reading from input URL: $input"
        1         response = HTTP.get(input)
        1         try
        1             data = JSON.parse(String(response.body))
        1             inputs = MandMath.get_grid_inputs(data)
        1             grid = MandMath.get_grid(inputs)
        1             MandMath.write_grid_to_csv(grid, input)
        -         catch e
        1             if isa(e, JSON.ParserError)
        0                 @error "Response from the URL is not valid JSON. Might be HTML or other format."
        -             else
        0                 rethrow()
        -             end
        -         end
        - 
        -     else
        -         # Check if input is a file or directory
        0         if isfile(input)
        0             @info "Reading from input FILE: $input"
        -             # Check if file has .mandart extension
        0             if occursin(DATA_FILE_EXTENTION, input)
        -                 # Read the JSON data from the file
        0                 data = JSON.parsefile(input)
        0                 inputs = MandMath.get_grid_inputs(data)
        0                 grid = MandMath.get_grid(inputs)
        0                 MandMath.write_grid_to_csv(grid, input)
        -             end
        0         elseif isdir(input)
        0             @info "Reading from input DIRECTORY: $input"
        -             # Process all .mandart files in directory recursively
        0             for file in Glob.glob(joinpath(input, "**/*.mandart"))
        -                 # Check if file has .mandart extension
        0                 if occursin(DATA_FILE_EXTENTION, file)
        -                     # Read the JSON data from the file
        0                     data = JSON.parsefile(file)
        0                     inputs = MandMath.get_grid_inputs(data)
        0                     grid = MandMath.get_grid(inputs)
        0                     MandMath.write_grid_to_csv(grid, file)
        -                 end
        0             end
        -         end
        -     end
        0     @info "functions.process_file_or_url() completed."
        - end
        - 
        3 function read_urls_from_file(filename::String)
        3     if isfile(filename)
        2         urls = readlines(filename)
        2         return urls
        -     else
        1         error("File with document urls ($filename) does not exist.")
        -     end
        - end
        - 
        2 function write_grid_to_csv(input_filename::String, grid::Array{Float64,2})
        2     @info "functions.write_grid_to_csv() called with $input_filename."
        2     base_name_without_ext = splitext(basename(input_filename))[1]
        2     output_file_basename = joinpath(base_name_without_ext * OUT_FILE_EXT)
        2     @info "functions.write_grid_to_csv() writing to $output_file_basename."
        2     output_dir = joinpath(@__DIR__, "..", OUTPUT_FOLDER)
        2     if !isdir(output_dir)
        0         Base.mkdir(output_dir)
        -     end
        2     output_file = joinpath(output_dir, output_file_basename)
        2     @info "functions.write_grid_to_csv() writing to $output_file."
        2     table = Tables.table(grid)
        2     CSV.write(output_file, table, header=false)
        - end
        - 
        1 function main(args::Vector{String}=ARGS)
        1     @info "MandMath.main() called."
        1     println(MandMath.greet())
        1     log_dir = joinpath(@__DIR__, "..", LOG_FOLDER)
        1     @info "log_dir = $log_dir"
        1     if !isdir(log_dir)
        0         Base.mkdir(log_dir)
        -     end
        1     log_file_path = joinpath(log_dir, LOG_FILE)
        1     io = Base.open(log_file_path, "w+")
        1     try
        1         log = Logging.SimpleLogger(io)
        1         @info "Logger initialized."
        - 
        -         #logger = Logging.global_logger(log)
        -         #@info "Set global logger $logger."
        - 
        -     catch e
        0         @error "ERROR creating loggers: $e"
        0         exit()
        -     end
        1     @info "Loggers initialized."
        - 
        -     # If no input file/url is provided, read from urls.txt and process all files
        1     if isempty(args) || length(args) == 0
        1         try
        1             @info "No args provided. Reading from $DATA_URL_FILE and $DATA_FOLDER."
        1             url_fp = joinpath(@__DIR__, "..", DATA_FOLDER, DATA_URL_FILE)
        1             urls = read_urls_from_file(url_fp)
        1             for url in urls
        1                 @info "Processing URL: $url"
        1                 process_file_or_url(url)
        0             end
        0             for file_path in Glob.glob("**/*.mandart")
        0                 @info "Processing file: $file_path"
        0                 process_file_or_url(file_path)
        1             end
        -         catch e
        1             @error "ERROR accessing $DATA_URL_FILE or $DATA_FOLDER file: $e"
        1             if io !== nothing
        2                 close(io)
        -             end
        -         end
        -     else
        0         @info "Processing args input: $args"
        0         input_fp = args[1]
        0         print("Processing input: ", input_fp)
        0         process_file_or_url(input_fp)
        -     end
        1     if io !== nothing
        1         close(io)
        -     end
        1     @info "MandMath.main() completed."
        - end
        - 
        - # execute some code if this file is run directly
        - if isfile(@__FILE__)
        -     main(ARGS)
        - end
